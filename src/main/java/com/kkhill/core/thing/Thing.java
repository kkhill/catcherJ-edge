package com.kkhill.core.thing;

import com.kkhill.core.exception.DuplicatePropertyException;
import com.kkhill.core.exception.DuplicateServiceException;

import java.util.HashMap;
import java.util.Map;

public abstract class Thing {

    /** id is unique, should be generated by core, rather driver **/
    private String id;

    /** different things can share a friendly name **/
    private String friendlyName;
    private boolean available;
    private State state;
    private Map<String, Property> properties;
    private Map<String, Service> services;

    public Thing(String friendlyName, boolean available) {

        this.friendlyName = friendlyName;
        this.available = available;
        this.properties = new HashMap<>();
        this.services = new HashMap<>();
    }

    public String getID() {
        return this.id;
    }

    void setID(String id) {
        this.id = id;
    }


    public String getFriendlyName() {
        return this.friendlyName;
    }

    public State getState() {
        return this.state;
    }

    void setState(State state) {
        this.state = state;
    }

    void updateState(Object value) throws IllegalAccessException {
        state.setValue(this, value);
    }

    public boolean isAvailable() {
        return this.available;
    }
    void disable() {
        this.available = false;
    }

    void enable() {
        this.available = true;
    }

    public Map<String, Property> getProperties() {
        return this.properties;
    }

    void addProperty(Property property) throws DuplicatePropertyException {
        if(properties.containsKey(property.getName())) throw new DuplicatePropertyException();
        this.properties.put(property.getName(), property);
    }

    void updateProperty(String name, Object object) throws IllegalAccessException {
        Property property = getProperty(name);
        property.setValue(this, object);
    }

    public Property getProperty(String name) {
        return this.properties.get(name);
    }

    public Map<String, Service> getServices() {
        return this.services;
    }

    public void addService(Service service) throws DuplicateServiceException {
        if(services.containsKey(service.getName())) throw new DuplicateServiceException();
        this.services.put(service.getName(), service);
    }

    public Service getService(String name) {
        return this.services.get(name);
    }

//    public abstract void defineProperties();
//
//    public abstract void defineServices();
}
